// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/yankeguo/nas-tools/model"
)

func newArchivedFile(db *gorm.DB, opts ...gen.DOOption) archivedFile {
	_archivedFile := archivedFile{}

	_archivedFile.archivedFileDo.UseDB(db, opts...)
	_archivedFile.archivedFileDo.UseModel(&model.ArchivedFile{})

	tableName := _archivedFile.archivedFileDo.TableName()
	_archivedFile.ALL = field.NewAsterisk(tableName)
	_archivedFile.ID = field.NewString(tableName, "id")
	_archivedFile.Year = field.NewString(tableName, "year")
	_archivedFile.Bundle = field.NewString(tableName, "bundle")
	_archivedFile.Name = field.NewString(tableName, "name")
	_archivedFile.Symlink = field.NewBool(tableName, "symlink")
	_archivedFile.Size = field.NewInt64(tableName, "size")
	_archivedFile.CRC32 = field.NewString(tableName, "crc32")
	_archivedFile.CreatedAt = field.NewTime(tableName, "created_at")

	_archivedFile.fillFieldMap()

	return _archivedFile
}

type archivedFile struct {
	archivedFileDo

	ALL       field.Asterisk
	ID        field.String
	Year      field.String
	Bundle    field.String
	Name      field.String
	Symlink   field.Bool
	Size      field.Int64
	CRC32     field.String
	CreatedAt field.Time

	fieldMap map[string]field.Expr
}

func (a archivedFile) Table(newTableName string) *archivedFile {
	a.archivedFileDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a archivedFile) As(alias string) *archivedFile {
	a.archivedFileDo.DO = *(a.archivedFileDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *archivedFile) updateTableName(table string) *archivedFile {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewString(table, "id")
	a.Year = field.NewString(table, "year")
	a.Bundle = field.NewString(table, "bundle")
	a.Name = field.NewString(table, "name")
	a.Symlink = field.NewBool(table, "symlink")
	a.Size = field.NewInt64(table, "size")
	a.CRC32 = field.NewString(table, "crc32")
	a.CreatedAt = field.NewTime(table, "created_at")

	a.fillFieldMap()

	return a
}

func (a *archivedFile) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *archivedFile) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 8)
	a.fieldMap["id"] = a.ID
	a.fieldMap["year"] = a.Year
	a.fieldMap["bundle"] = a.Bundle
	a.fieldMap["name"] = a.Name
	a.fieldMap["symlink"] = a.Symlink
	a.fieldMap["size"] = a.Size
	a.fieldMap["crc32"] = a.CRC32
	a.fieldMap["created_at"] = a.CreatedAt
}

func (a archivedFile) clone(db *gorm.DB) archivedFile {
	a.archivedFileDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a archivedFile) replaceDB(db *gorm.DB) archivedFile {
	a.archivedFileDo.ReplaceDB(db)
	return a
}

type archivedFileDo struct{ gen.DO }

func (a archivedFileDo) Debug() *archivedFileDo {
	return a.withDO(a.DO.Debug())
}

func (a archivedFileDo) WithContext(ctx context.Context) *archivedFileDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a archivedFileDo) ReadDB() *archivedFileDo {
	return a.Clauses(dbresolver.Read)
}

func (a archivedFileDo) WriteDB() *archivedFileDo {
	return a.Clauses(dbresolver.Write)
}

func (a archivedFileDo) Session(config *gorm.Session) *archivedFileDo {
	return a.withDO(a.DO.Session(config))
}

func (a archivedFileDo) Clauses(conds ...clause.Expression) *archivedFileDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a archivedFileDo) Returning(value interface{}, columns ...string) *archivedFileDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a archivedFileDo) Not(conds ...gen.Condition) *archivedFileDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a archivedFileDo) Or(conds ...gen.Condition) *archivedFileDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a archivedFileDo) Select(conds ...field.Expr) *archivedFileDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a archivedFileDo) Where(conds ...gen.Condition) *archivedFileDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a archivedFileDo) Order(conds ...field.Expr) *archivedFileDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a archivedFileDo) Distinct(cols ...field.Expr) *archivedFileDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a archivedFileDo) Omit(cols ...field.Expr) *archivedFileDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a archivedFileDo) Join(table schema.Tabler, on ...field.Expr) *archivedFileDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a archivedFileDo) LeftJoin(table schema.Tabler, on ...field.Expr) *archivedFileDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a archivedFileDo) RightJoin(table schema.Tabler, on ...field.Expr) *archivedFileDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a archivedFileDo) Group(cols ...field.Expr) *archivedFileDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a archivedFileDo) Having(conds ...gen.Condition) *archivedFileDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a archivedFileDo) Limit(limit int) *archivedFileDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a archivedFileDo) Offset(offset int) *archivedFileDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a archivedFileDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *archivedFileDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a archivedFileDo) Unscoped() *archivedFileDo {
	return a.withDO(a.DO.Unscoped())
}

func (a archivedFileDo) Create(values ...*model.ArchivedFile) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a archivedFileDo) CreateInBatches(values []*model.ArchivedFile, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a archivedFileDo) Save(values ...*model.ArchivedFile) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a archivedFileDo) First() (*model.ArchivedFile, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ArchivedFile), nil
	}
}

func (a archivedFileDo) Take() (*model.ArchivedFile, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ArchivedFile), nil
	}
}

func (a archivedFileDo) Last() (*model.ArchivedFile, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ArchivedFile), nil
	}
}

func (a archivedFileDo) Find() ([]*model.ArchivedFile, error) {
	result, err := a.DO.Find()
	return result.([]*model.ArchivedFile), err
}

func (a archivedFileDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ArchivedFile, err error) {
	buf := make([]*model.ArchivedFile, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a archivedFileDo) FindInBatches(result *[]*model.ArchivedFile, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a archivedFileDo) Attrs(attrs ...field.AssignExpr) *archivedFileDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a archivedFileDo) Assign(attrs ...field.AssignExpr) *archivedFileDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a archivedFileDo) Joins(fields ...field.RelationField) *archivedFileDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a archivedFileDo) Preload(fields ...field.RelationField) *archivedFileDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a archivedFileDo) FirstOrInit() (*model.ArchivedFile, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ArchivedFile), nil
	}
}

func (a archivedFileDo) FirstOrCreate() (*model.ArchivedFile, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ArchivedFile), nil
	}
}

func (a archivedFileDo) FindByPage(offset int, limit int) (result []*model.ArchivedFile, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a archivedFileDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a archivedFileDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a archivedFileDo) Delete(models ...*model.ArchivedFile) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *archivedFileDo) withDO(do gen.Dao) *archivedFileDo {
	a.DO = *do.(*gen.DO)
	return a
}
